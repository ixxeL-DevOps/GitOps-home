---
name: Helm Rendered Manifest (ArgoCD apps)
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
    paths:
      - '**/argoApps/*.yaml'
      - '**/argoApps/*.yml'

concurrency:
  group: auto
  cancel-in-progress: false

jobs:
  helm-diff-chart:
    runs-on: self-hosted
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find modified Application/ApplicationSet files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/argoApps/*.yaml
            **/argoApps/*.yml

      - name: Generate diffs for each Chart
        id: gen-pr-chart
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          RED="\033[1;31m"
          GREEN="\033[1;32m"
          YELLOW="\033[1;33m"
          BLUE="\033[1;34m"
          PURPLE="\033[1;35m"
          CYAN="\033[1;36m"
          BLANK="\033[0m"

          echo "CHART_FILES=${ALL_CHANGED_FILES}"

          detect_kind() {
            local file=$1
            kind=$(yq e '.kind' "$file")
            case "$kind" in
              "Application")
                echo "Application"
                ;;
              "ApplicationSet")
                echo "ApplicationSet"
                ;;
              *)
                echo "Unknown"
                ;;
            esac
          }

          template_version() {
            local suffix=$1
            mkdir -p "$suffix"

            local kind=$(detect_kind "$file")
            if [ "$kind" = "Application" ]
            then
              if [ $(yq e '.spec | has("source")' "$file") == 'true' ]
              then
                echo -e "${CYAN}[ INFO ] > Application has single source"
                generate_single_source "$file" "$suffix" ""
              fi

              if [ $(yq e '.spec | has("sources")' "$file") == 'true' ]
              then
                sources_count=$(yq e '.spec.sources | length' "$file")
                echo -e "${CYAN}[ INFO ] > Application has multiple sources (${PURPLE}${sources_count}${CYAN})${BLANK}"
                for ((i = 0; i < $sources_count; i++))
                do
                  generate_single_source "$file" "$suffix" ".spec.sources[$i]"
                done
              fi

            elif [ "$kind" = "ApplicationSet" ]
            then
              if [ $(yq e '.spec.template.spec | has("source")' "$file") == 'true' ]
              then
                echo -e "${CYAN}[ INFO ] > ApplicationSet has single source"
                generate_single_source "$file" "$suffix" ".spec.template.spec.source"
              fi

              if [ $(yq e '.spec.template.spec | has("sources")' "$file") == 'true' ]
              then
                sources_count=$(yq e '.spec.template.spec.sources | length' "$file")
                echo -e "${CYAN}[ INFO ] > ApplicationSet has multiple sources (${PURPLE}${sources_count}${CYAN})${BLANK}"
                for ((i = 0; i < $sources_count; i++))
                do
                  generate_single_source "$file" "$suffix" ".spec.template.spec.sources[$i]"
                done
              fi
            fi
          }

          generate_single_source() {
            local file=$1
            local suffix=$2
            local source_path=$3

            APP_NAME=$(yq e '.metadata.name' "$file")
            APP_CHART_REPO=$(yq e "$source_path.repoURL" "$file")
            APP_CHART_NAME=$(yq e "$source_path.chart" "$file")
            APP_CHART_VERSION=$(yq e "$source_path.targetRevision" "$file")
            APP_CHART_RELEASE=$(yq e "$source_path.helm.releaseName" "$file")

            echo -e "${CYAN}[ INFO ] > Processing source for chart ${PURPLE}${APP_CHART_NAME}${CYAN} with release ${PURPLE}${APP_CHART_RELEASE}${BLANK}"

            VALUES_FILE="${suffix}/${APP_CHART_NAME}_${APP_CHART_RELEASE}_values.yaml"
            if yq e "$source_path.helm | has(\"valuesObject\")" "$file" > /dev/null 2>&1
            then
              echo -e "${CYAN}[ INFO ] > Generating values file ${PURPLE}${VALUES_FILE}${CYAN} from valuesObject key"
              yq e "$source_path.helm.valuesObject" "$file" > "$VALUES_FILE"
              sed -i 's/{{\([^}]*\)}}/\1/g' "$VALUES_FILE"
            fi

            APP_CHART_RELEASE=$(echo "${APP_CHART_RELEASE}" | sed 's/[^a-zA-Z0-9._-]//g')

            echo -e "${YELLOW}[ EXECUTING ] > Rendering for branch : ${GREEN}${suffix}${BLANK}"

            if [[ "$APP_CHART_REPO" =~ ^http(s)?:// ]]; then
              helm repo add "${APP_CHART_NAME}" "${APP_CHART_REPO}"
              helm repo update "${APP_CHART_NAME}"
              helm template "${APP_CHART_RELEASE}" "${APP_CHART_NAME}/${APP_CHART_NAME}" --version "${APP_CHART_VERSION}" -f "${VALUES_FILE}" > "${suffix}/${APP_CHART_NAME}_${APP_CHART_RELEASE}_manifest_${suffix}.yaml"
            else
              OCI_CHART="${APP_CHART_REPO}/${APP_CHART_NAME}"
              helm pull "oci://${OCI_CHART}" --version "${APP_CHART_VERSION}" --untar --untardir "${suffix}/oci_temp"
              helm template "${APP_CHART_RELEASE}" "${suffix}/oci_temp/${APP_CHART_NAME}" -f "${VALUES_FILE}" > "${suffix}/${APP_CHART_NAME}_${APP_CHART_RELEASE}_manifest_${suffix}.yaml"
              rm -rf "${suffix}/oci_temp"
            fi
          }

          for file in ${ALL_CHANGED_FILES}; do
            echo -e "${BLUE}[ STEP ] > Processing file ${YELLOW}${file}${BLANK}"
            CHART_DIR=$(dirname "$file")

            template_version "pr"

            git checkout origin/main -- "$file"

            template_version "main"
            echo ""
          done
      - name: Generate dyff on release
        id: dyff-helm
        uses: ixxeL-DevOps/gha-templates/.github/actions/dyff@main
        with:
          source: main/*_manifest_main.yaml
          target: pr/*_manifest_pr.yaml
          exclude-regexp: "spec.template.metadata.annotations.checksum"

      - name: Using diff for MD
        id: diff
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          SOURCE: main/*_manifest_main.yaml
          TARGET: pr/*_manifest_pr.yaml
          exclude-regexp: "spec.template.metadata.annotations.checksum"
        run: |
          RED="\033[1;31m"
          GREEN="\033[1;32m"
          YELLOW="\033[1;33m"
          BLUE="\033[1;34m"
          PURPLE="\033[1;35m"
          CYAN="\033[1;36m"
          BLANK="\033[0m"

          diff --version

          if [ -f "${SOURCE}" ] && [ -f "${TARGET}" ]
          then
            echo -e "${CYAN}[ INFO ] > Files one to one${BLANK}"
            diff ${SOURCE} ${TARGET} > diff.md

          elif [[ "${SOURCE}" == *"*"* ]] && [[ "${TARGET}" == *"*"* ]]
          then
            echo -e "${CYAN}[ INFO ] > Pattern source : ${SOURCE} and target : ${TARGET}${BLANK}"
            SOURCE_SUFFIX=$(echo "${SOURCE}" | sed 's/.*\*//')
            TARGET_PREFIX=$(echo "${TARGET}" | sed 's/\*.*//')
            TARGET_SUFFIX=$(echo "${TARGET}" | sed 's/.*\*//')

            for source_file in ${SOURCE}
            do
              echo -e "${CYAN}[ INFO ] > found file ${PURPLE}$source_file${BLANK}"
              base_name=$(basename "$source_file" "$SOURCE_SUFFIX")
              echo -e "${CYAN}[ INFO ] > Base name extracted ${PURPLE}$base_name${BLANK}"
              target_file="${TARGET_PREFIX}${base_name}${TARGET_SUFFIX}"
              echo -e "${CYAN}[ INFO ] > Target file ${PURPLE}$target_file${BLANK}"

              if [ -f "$target_file" ]
              then
                diff ${SOURCE} ${TARGET} >> diff.md
              else
                echo -e "${RED}[ ERROR ] > Target file $target_file not found${BLANK}"
              fi
            done
          fi

      - name: Post diff as comment
        run: |
          gh pr comment ${{ github.event.number }} --repo ${{ github.repository }} --body-file diff.md --edit-last || \
          gh pr comment ${{ github.event.number }} --repo ${{ github.repository }} --body-file diff.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Comment on PR for helm dyff
      #   uses: actions/github-script@v7
      #   if: github.event_name == 'pull_request'
      #   env:
      #     DYFF_RESULTS: ${{ steps.dyff-helm.outputs.DYFF_RESULT }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `
      #       #### Dyff helm: \`chart helm dyff\`
      #       \`\`\`py
      #       ${process.env.DYFF_RESULTS}
      #       \`\`\`
      #       `;

      #       github.rest.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         body: output
      #       })
